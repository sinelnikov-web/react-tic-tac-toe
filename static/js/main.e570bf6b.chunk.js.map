{"version":3,"sources":["logo.svg","Components/Tic-tac-toe/ScoreBoard/ScoreBoard.jsx","Components/Tic-tac-toe/Game.jsx","Components/common/game-utils.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreBoard","score","className","cross","circle","Game","fieldsArr","fieldId","i","j","isClicked","pos","user","isHover","useState","setUser","win","setWin","fields","setFields","setScore","useEffect","checkWinOrDraw","gameFields","gameMap","row","push","length","includes","rowSet","Set","size","Array","from","col","colSet","mainDiagonal","sideDiagonal","mainDiagonalSet","sideDiagonalSet","fullRows","analyzeMap","prevScore","onClick","e","target","id","prevFields","prevUser","Object","keys","map","key","data-column","data-row","data-user","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e570bf6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\n\r\nconst ScoreBoard = ({score}) => {\r\n\r\n    return(\r\n        <div className=\"shadow scoreboard\">\r\n            <h1 className=\"scoreboard__title\">Счёт</h1>\r\n            <div className=\"user-panel\">\r\n                <div className=\"shadow user-info bg-primary bg-gradient\">\r\n                    <span className=\"x-user-score\">{score.cross}</span>\r\n                </div>\r\n                <div className=\"shadow user-info bg-danger bg-gradient\">\r\n                    <span className=\"o-user-score\">{score.circle}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ScoreBoard","import {useEffect, useState} from \"react\";\r\nimport {analyzeMap} from \"../common/game-utils\";\r\nimport ScoreBoard from \"./ScoreBoard/ScoreBoard\";\r\n\r\nconst Game = () => {\r\n    let fieldsArr = {}\r\n    let fieldId = 0\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            fieldsArr[fieldId] = {\r\n                isClicked: false,\r\n                pos: [j, i],\r\n                user: '',\r\n                isHover: false\r\n            }\r\n            fieldId++\r\n        }\r\n    }\r\n\r\n    let [user, setUser] = useState('cross')\r\n\r\n    let [win, setWin] = useState('')\r\n\r\n    let [fields, setFields] = useState({...fieldsArr})\r\n\r\n    let [score, setScore] = useState({\r\n        cross: 0,\r\n        circle: 0\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        let checkWinOrDraw = analyzeMap(fields)\r\n        if (checkWinOrDraw) {\r\n            if (checkWinOrDraw !== 'draw') {\r\n                setScore(prevScore => ({\r\n                    ...prevScore,\r\n                    [checkWinOrDraw]: prevScore[checkWinOrDraw] + 1\r\n                }))\r\n            }\r\n            setWin(checkWinOrDraw)\r\n        }\r\n    }, [fields])\r\n\r\n    const onClick = (e) => {\r\n        const fieldId = e.target.id\r\n        if (!fields[fieldId].isClicked) {\r\n            setFields(prevFields => ({\r\n                ...prevFields,\r\n                [fieldId]: {\r\n                    ...prevFields[fieldId],\r\n                    isClicked: true,\r\n                    user: user\r\n                }\r\n            }))\r\n            setUser(prevUser => prevUser === \"cross\" ? \"circle\" : \"cross\")\r\n        }\r\n    }\r\n\r\n    const handleModalClose = () => {\r\n        setFields({...fieldsArr})\r\n        setWin('')\r\n    }\r\n\r\n    const handleMouseEnter = (e) => {\r\n        let fieldId = e.target.id\r\n        if (!fields[fieldId].isClicked) {\r\n            setFields(prevFields => ({\r\n                ...prevFields,\r\n                [fieldId]: {\r\n                    ...prevFields[fieldId],\r\n                    isHover: true\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    const handleMouseLeave = (e) => {\r\n        let fieldId = e.target.id\r\n        if (!fields[fieldId].isClicked) {\r\n            setFields(prevFields => ({\r\n                ...prevFields,\r\n                [fieldId]: {\r\n                    ...prevFields[fieldId],\r\n                    isHover: false\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <ScoreBoard score={score}/>\r\n            <div className=\"shadow tic-tac-toe\">\r\n                {\r\n                    Object.keys(fields).map(key => {\r\n                        return (\r\n                            <div\r\n                                key={key}\r\n                                id={key}\r\n                                className={\r\n                                    `shadow tic-tac-toe__field bg-gradient ${fields[key].user ? fields[key].user === 'cross' ? 'bg-primary' : 'bg-danger' : 'no'}`\r\n                                }\r\n                                data-column={fields[key].pos[0]}\r\n                                data-row={fields[key].pos[1]}\r\n                                data-user={fields[key].user}\r\n                                onClick={onClick}\r\n                                onMouseEnter={(e) => handleMouseEnter(e)}\r\n                                onMouseLeave={(e) => handleMouseLeave(e)}\r\n                            >\r\n                            <span id={key}\r\n                                  className={`shape ${fields[key].user} ${!fields[key].user && fields[key].isHover ? user : ''}`}\r\n                                  data-user={fields[key].user}\r\n                            />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                <div className={`message${win ? \" open\" : \"\"}`} id=\"win\">\r\n                    <div className=\"shadow message__body\">\r\n                        <h1 className={`message__title text-${win === 'cross' ? 'primary' : win === 'circle' ? 'danger' : 'default'}`}>\r\n                            {win === 'cross' ? \"Победили крестики!!!\" : win === 'circle' ? \"Победили нолики\" : \"Ничья.\"}\r\n                        </h1>\r\n                        <button onClick={handleModalClose}\r\n                                className={`message__button btn btn-${win === 'cross' ? 'primary' : win === 'circle' ? 'danger' : 'dark'}`}>Start\r\n                            new game!\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Game","\r\n\r\nexport function analyzeMap(gameFields) {\r\n    // generate game map\r\n    let gameMap = []\r\n    let fieldId = 0\r\n    for (let i = 0; i < 3; i++) {\r\n        let row = []\r\n        for (let i = 0; i < 3; i++) {\r\n            row.push(gameFields[fieldId].user)\r\n            fieldId++;\r\n        }\r\n        gameMap.push(row)\r\n    }\r\n    // search in rows\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        if (gameMap[i].includes('')) {\r\n            continue\r\n        }\r\n        const rowSet = new Set(gameMap[i])\r\n        if (rowSet.size === 1) {\r\n            return Array.from(rowSet)[0]\r\n        }\r\n    }\r\n    // search in cols\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        const col = [gameMap[0][i], gameMap[1][i], gameMap[2][i]]\r\n        if (col.includes('')) {\r\n            continue\r\n        }\r\n        const colSet = new Set(col)\r\n        if (colSet.size === 1) {\r\n            return Array.from(colSet)[0]\r\n        }\r\n    }\r\n    //search in diagonals\r\n    let mainDiagonal = []\r\n    let sideDiagonal = []\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        for (let j = 0; j < gameMap[i].length; j++) {\r\n            if (i === j) {\r\n                mainDiagonal.push(gameMap[i][j])\r\n            }\r\n            if (i + j === gameMap[i].length - 1) {\r\n                sideDiagonal.push(gameMap[i][j])\r\n            }\r\n        }\r\n    }\r\n    if (!mainDiagonal.includes('')) {\r\n        let mainDiagonalSet = new Set(mainDiagonal)\r\n        if (mainDiagonalSet.size === 1) {\r\n            return Array.from(mainDiagonalSet)[0]\r\n        }\r\n    }\r\n    if (!sideDiagonal.includes('')) {\r\n        let sideDiagonalSet = new Set(sideDiagonal)\r\n        if (sideDiagonalSet.size === 1) {\r\n            return Array.from(sideDiagonalSet)[0]\r\n        }\r\n    }\r\n    // check draw\r\n    let fullRows = 0\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        if (!gameMap[i].includes('')) {\r\n            fullRows++\r\n        }\r\n    }\r\n    if (fullRows === 3) {\r\n        return 'draw'\r\n    }\r\n    return false\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Game from \"./Components/Tic-tac-toe/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","Components/Tic-tac-toe/ScoreBoard/ScoreBoard.jsx","Components/Tic-tac-toe/GameField/GameField.jsx","Components/Tic-tac-toe/Modal/Modal.jsx","Components/Tic-tac-toe/Game.jsx","Components/common/game-utils.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreBoard","score","className","cross","circle","GameField","fieldId","isUserClicked","isUserWithPhone","field","onFieldClick","handleMouseEnter","handleMouseLeave","user","id","data-column","pos","data-row","data-user","onClick","onMouseEnter","e","onMouseLeave","isHover","Modal","win","handleModalClose","Game","isMobile","test","navigator","userAgent","gameMap","fieldsArr","i","j","isClicked","createMap","useState","setUser","setWin","fields","setFields","setScore","useEffect","checkWinOrDraw","gameFields","row","push","length","includes","rowSet","Set","size","Array","from","col","colSet","mainDiagonal","sideDiagonal","mainDiagonalSet","sideDiagonalSet","fullRows","analyzeMap","target","prevFields","prevUser","Object","keys","map","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9749f8c7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\n\r\nconst ScoreBoard = ({score}) => {\r\n\r\n    return(\r\n        <div className=\"shadow scoreboard\">\r\n            <h1 className=\"scoreboard__title\">Счёт</h1>\r\n            <div className=\"user-panel\">\r\n                <div className=\"shadow user-info bg-primary bg-gradient\">\r\n                    <span className=\"x-user-score\">{score.cross}</span>\r\n                </div>\r\n                <div className=\"shadow user-info bg-danger bg-gradient\">\r\n                    <span className=\"o-user-score\">{score.circle}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ScoreBoard","const GameField = ({fieldId, isUserClicked, isUserWithPhone, field,\r\n                   onFieldClick, handleMouseEnter, handleMouseLeave, user}) => {\r\n\r\n\r\n    return (\r\n        <div\r\n            id={fieldId}\r\n            className={\r\n                `shadow tic-tac-toe__field bg-gradient ${isUserClicked} ${isUserWithPhone}`\r\n            }\r\n            data-column={field.pos[0]}\r\n            data-row={field.pos[1]}\r\n            data-user={field.user}\r\n            onClick={onFieldClick}\r\n            onMouseEnter={(e) => handleMouseEnter(e)}\r\n            onMouseLeave={(e) => handleMouseLeave(e)}\r\n        >\r\n            <span id={fieldId}\r\n                  className={`shape ${field.user} ${!field.user && field.isHover ? user : ''}`}\r\n                  data-user={field.user}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GameField","\r\n\r\n\r\nconst Modal = ({win, handleModalClose}) => {\r\n    return(\r\n        <div className={`message${win ? \" open\" : \"\"}`} id=\"win\">\r\n            <div className=\"shadow message__body\">\r\n                <h1 className={`message__title text-${win === 'cross' ? 'primary' : win === 'circle' ? 'danger' : 'default'}`}>\r\n                    {win === 'cross' ? \"Победили крестики!!!\" : win === 'circle' ? \"Победили нолики\" : \"Ничья.\"}\r\n                </h1>\r\n                <button onClick={handleModalClose}\r\n                        className={`message__button btn btn-${win === 'cross' ? 'primary' : win === 'circle' ? 'danger' : 'dark'}`}>Start\r\n                    new game!\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Modal","import {useEffect, useState} from \"react\";\r\nimport {analyzeMap, createMap} from \"../common/game-utils\";\r\nimport ScoreBoard from \"./ScoreBoard/ScoreBoard\";\r\nimport GameField from \"./GameField/GameField\";\r\nimport Modal from \"./Modal/Modal\";\r\n\r\nconst Game = () => {\r\n\r\n    const isMobile = /Mobile|webOS|BlackBerry|IEMobile|MeeGo|mini|Fennec|Windows Phone|Android|iP(ad|od|hone)/i.test(navigator.userAgent);\r\n\r\n    let gameMap = createMap()\r\n\r\n    // state for user queue\r\n    let [user, setUser] = useState('cross')\r\n\r\n    // state for win / lose / draw control\r\n    let [win, setWin] = useState('')\r\n\r\n    // state for game map\r\n    let [fields, setFields] = useState({...gameMap})\r\n\r\n    // state for score\r\n    let [score, setScore] = useState({\r\n        cross: 0,\r\n        circle: 0\r\n    })\r\n\r\n    // analyze map when user click on field\r\n    useEffect(() => {\r\n        let checkWinOrDraw = analyzeMap(fields)\r\n        setWin(checkWinOrDraw)\r\n        if (checkWinOrDraw) {\r\n            if (checkWinOrDraw !== 'draw') {\r\n                setScore({\r\n                    ...score,\r\n                    [checkWinOrDraw]: ++score[checkWinOrDraw]\r\n                })\r\n            }\r\n\r\n        }\r\n    }, [fields])\r\n\r\n    const onFieldClick = (e) => {\r\n        const fieldId = e.target.id\r\n        if (!fields[fieldId].isClicked) {\r\n            setFields(prevFields => ({\r\n                ...prevFields,\r\n                [fieldId]: {\r\n                    ...prevFields[fieldId],\r\n                    isClicked: true,\r\n                    user: user\r\n                }\r\n            }))\r\n            setUser(prevUser => prevUser === \"cross\" ? \"circle\" : \"cross\")\r\n        }\r\n    }\r\n\r\n    const handleModalClose = () => {\r\n        setFields({...gameMap})\r\n        setWin('')\r\n    }\r\n\r\n    const handleMouseEnter = (e) => {\r\n        let fieldId = e.target.id\r\n        if (!fields[fieldId].isClicked) {\r\n            setFields(prevFields => ({\r\n                ...prevFields,\r\n                [fieldId]: {\r\n                    ...prevFields[fieldId],\r\n                    isHover: true\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    const handleMouseLeave = (e) => {\r\n        let fieldId = e.target.id\r\n        if (!fields[fieldId].isClicked) {\r\n            setFields(prevFields => ({\r\n                ...prevFields,\r\n                [fieldId]: {\r\n                    ...prevFields[fieldId],\r\n                    isHover: false\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ScoreBoard score={score}/>\r\n            <div className=\"shadow tic-tac-toe\">\r\n                {\r\n                    Object.keys(fields).map(key => {\r\n                        const isUserClicked = fields[key].user ? fields[key].user === 'cross' ? 'bg-primary' : 'bg-danger' : ''\r\n                        const isUserWithPhone = isMobile ? !fields[key].isClicked ? user === 'cross' ? 'bg-primary' : 'bg-danger' : '' : ''\r\n                        return (\r\n                            <GameField\r\n                                key={key}\r\n                                fieldId={key}\r\n                                isUserClicked={isUserClicked}\r\n                                isUserWithPhone={isUserWithPhone}\r\n                                field={fields[key]}\r\n                                onFieldClick={onFieldClick}\r\n                                handleMouseEnter={handleMouseEnter}\r\n                                handleMouseLeave={handleMouseLeave}\r\n                                user={user}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n                <Modal win={win} handleModalClose={handleModalClose}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Game","\r\n\r\nexport function analyzeMap(gameFields) {\r\n    // generate game map\r\n    let gameMap = []\r\n    let fieldId = 0\r\n    for (let i = 0; i < 3; i++) {\r\n        let row = []\r\n        for (let i = 0; i < 3; i++) {\r\n            row.push(gameFields[fieldId].user)\r\n            fieldId++;\r\n        }\r\n        gameMap.push(row)\r\n    }\r\n    // search in rows\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        if (gameMap[i].includes('')) {\r\n            continue\r\n        }\r\n        const rowSet = new Set(gameMap[i])\r\n        if (rowSet.size === 1) {\r\n            return Array.from(rowSet)[0]\r\n        }\r\n    }\r\n    // search in cols\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        const col = [gameMap[0][i], gameMap[1][i], gameMap[2][i]]\r\n        if (col.includes('')) {\r\n            continue\r\n        }\r\n        const colSet = new Set(col)\r\n        if (colSet.size === 1) {\r\n            return Array.from(colSet)[0]\r\n        }\r\n    }\r\n    //search in diagonals\r\n    let mainDiagonal = []\r\n    let sideDiagonal = []\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        for (let j = 0; j < gameMap[i].length; j++) {\r\n            if (i === j) {\r\n                mainDiagonal.push(gameMap[i][j])\r\n            }\r\n            if (i + j === gameMap[i].length - 1) {\r\n                sideDiagonal.push(gameMap[i][j])\r\n            }\r\n        }\r\n    }\r\n    if (!mainDiagonal.includes('')) {\r\n        let mainDiagonalSet = new Set(mainDiagonal)\r\n        if (mainDiagonalSet.size === 1) {\r\n            return Array.from(mainDiagonalSet)[0]\r\n        }\r\n    }\r\n    if (!sideDiagonal.includes('')) {\r\n        let sideDiagonalSet = new Set(sideDiagonal)\r\n        if (sideDiagonalSet.size === 1) {\r\n            return Array.from(sideDiagonalSet)[0]\r\n        }\r\n    }\r\n    // check draw\r\n    let fullRows = 0\r\n    for (let i = 0; i < gameMap.length; i++) {\r\n        if (!gameMap[i].includes('')) {\r\n            fullRows++\r\n        }\r\n    }\r\n    if (fullRows === 3) {\r\n        return 'draw'\r\n    }\r\n    return false\r\n}\r\n\r\nexport function createMap() {\r\n    let fieldsArr = {}\r\n    let fieldId = 0\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            fieldsArr[fieldId] = {\r\n                isClicked: false,\r\n                pos: [j, i],\r\n                user: '',\r\n                isHover: false\r\n            }\r\n            fieldId++\r\n        }\r\n    }\r\n    return fieldsArr\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Game from \"./Components/Tic-tac-toe/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}